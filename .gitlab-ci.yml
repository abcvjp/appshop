image: docker/compose:alpine-1.29.2

services:
  - docker:dind

stages:
  - build
  - test
  - deploy

variables:
  APP_IMAGE_NAME: "webshop_app"
  ADMIN_IMAGE_NAME: "webshop_admin"
  API_IMAGE_NAME: "webshop_api"
  WORKER_IMAGE_NAME: "webshop_worker"

before_script:
  - docker version
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

build-api:
  stage: build
  script:
    - docker pull $CI_REGISTRY_IMAGE/$API_IMAGE_NAME:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE/$API_IMAGE_NAME:latest --tag $CI_REGISTRY_IMAGE/$API_IMAGE_NAME:$CI_COMMIT_SHA --tag $CI_REGISTRY_IMAGE/$API_IMAGE_NAME:latest --file api/Dockerfile.prod ./api
    - docker push $CI_REGISTRY_IMAGE/$API_IMAGE_NAME:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/$API_IMAGE_NAME:latest

build-admin:
  stage: build
  script:
    - docker pull $CI_REGISTRY_IMAGE/$ADMIN_IMAGE_NAME:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE/$ADMIN_IMAGE_NAME:latest --tag $CI_REGISTRY_IMAGE/$ADMIN_IMAGE_NAME:$CI_COMMIT_SHA --tag $CI_REGISTRY_IMAGE/$ADMIN_IMAGE_NAME:latest ./admin
    - docker push $CI_REGISTRY_IMAGE/$ADMIN_IMAGE_NAME:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/$ADMIN_IMAGE_NAME:latest

build-app:
  stage: build
  script:
    - docker pull $CI_REGISTRY_IMAGE/$APP_IMAGE_NAME:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE/$APP_IMAGE_NAME:latest --tag $CI_REGISTRY_IMAGE/$APP_IMAGE_NAME:$CI_COMMIT_SHA --tag $CI_REGISTRY_IMAGE/$APP_IMAGE_NAME:latest ./app
    - docker push $CI_REGISTRY_IMAGE/$APP_IMAGE_NAME:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/$APP_IMAGE_NAME:latest

build-worker:
  stage: build
  script:
    - docker pull $CI_REGISTRY_IMAGE/$WORKER_IMAGE_NAME:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE/$WORKER_IMAGE_NAME:latest --tag $CI_REGISTRY_IMAGE/$WORKER_IMAGE_NAME:latest --file worker/Dockerfile.prod ./worker
    - docker push $CI_REGISTRY_IMAGE/$WORKER_IMAGE_NAME:latest

test-api:
  stage: test
  script:
    - docker pull $CI_REGISTRY_IMAGE/$API_IMAGE_NAME:latest || true
    - docker pull $CI_REGISTRY_IMAGE/$WORKER_IMAGE_NAME:latest || true
    - docker pull $CI_REGISTRY_IMAGE/$APP_IMAGE_NAME:latest || true
    - COMPOSE_HTTP_TIMEOUT=1000 docker-compose -f docker-compose.test.yml up -d
    - sleep 15
    - docker-compose exec -T api npm run ci:test # test api

test-app:
  stage: test
  before_script:
    - apt-get install libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb
  script:
    - docker pull $CI_REGISTRY_IMAGE/$API_IMAGE_NAME:latest || true
    - docker pull $CI_REGISTRY_IMAGE/$WORKER_IMAGE_NAME:latest || true
    - docker pull $CI_REGISTRY_IMAGE/$APP_IMAGE_NAME:latest || true
    - COMPOSE_HTTP_TIMEOUT=1000 docker-compose -f docker-compose.test.yml up -d
    - sleep 20
    - docker-compose exec -T app npm run test:ci:run

deploy:
  stage: deploy
  when: manual
  tags:
    - beta-server
  before_script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo "Start deploy"
    - docker pull $CI_REGISTRY_IMAGE/$API_IMAGE_NAME:latest || true
    - docker pull $CI_REGISTRY_IMAGE/$ADMIN_IMAGE_NAME:latest || true
    - docker pull $CI_REGISTRY_IMAGE/$APP_IMAGE_NAME:latest || true
    - docker pull $CI_REGISTRY_IMAGE/$WORKER_IMAGE_NAME:latest || true
    - COMPOSE_HTTP_TIMEOUT=1000 docker-compose -f docker-compose.prod.yml up -d --build --force-recreate
    # - docker-compose exec -T api npm run db:reset